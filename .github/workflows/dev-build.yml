name: 自动构建开发版本

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

# 限制并发执行
concurrency:
  group: dev-build-${{ github.ref }}
  cancel-in-progress: true

# 添加必要的权限
permissions:
  contents: write
  actions: read

env:
  VITE_BUILD_TYPE: development

jobs:
  build-windows:
    name: 构建Windows版本
    runs-on: windows-latest # 使用GitHub托管的Windows服务器
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.create_tag.outputs.tag_name }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          # 强制获取最新代码，避免缓存问题
          ref: ${{ github.ref }}

      - name: 配置Git安全目录
        run: |
          git config --global --add safe.directory $env:GITHUB_WORKSPACE
          Write-Host "✅ Git safe directory configured"
          
      - name: 确保获取最新代码
        run: |
          git fetch origin ${{ github.ref_name }}
          git reset --hard origin/${{ github.ref_name }}
          $currentCommit = git rev-parse HEAD
          Write-Host "📝 Current commit: $currentCommit"
          Write-Host "📝 Expected commit: ${{ github.sha }}"
          if ($currentCommit -ne "${{ github.sha }}") {
            Write-Error "❌ Commit mismatch! Expected ${{ github.sha }}, got $currentCommit"
            exit 1
          }
          Write-Host "✅ Code is up to date"

      - name: 获取包版本并创建开发版本
        id: version
        run: |
          # 读取 package.json 的版本号
          $packageJson = Get-Content -Raw -Path "package.json" -Encoding UTF8 | ConvertFrom-Json
          $packageVersion = $packageJson.version
          
          # 获取当前基础版本的所有开发版本标签
          $allTags = git tag -l "dev-$packageVersion-dev.*" | Sort-Object -Descending
          
          # 计算下一个构建号
          $buildNumber = 1
          if ($allTags.Count -gt 0) {
            # 从最新的标签中提取构建号
            $latestTag = $allTags[0]
            if ($latestTag -match "dev-$packageVersion-dev\.(\d+)$") {
              $buildNumber = [int]$matches[1] + 1
            }
          }
          
          $devVersion = "$packageVersion-dev.$buildNumber"
          
          echo "version=$devVersion" >> $env:GITHUB_OUTPUT
          echo "package_version=$packageVersion" >> $env:GITHUB_OUTPUT
          echo "build_number=$buildNumber" >> $env:GITHUB_OUTPUT
          
          Write-Host "📦 Package Version: $packageVersion"
          Write-Host "🔧 Dev Version: $devVersion"
          Write-Host "🔢 Build Number: $buildNumber"

      - name: 创建开发标签
        id: create_tag
        run: |
          $tagName = "dev-${{ steps.version.outputs.version }}"
          echo "tag_name=$tagName" >> $env:GITHUB_OUTPUT
          
          # 检查tag是否已存在
          $existingTags = git ls-remote --tags origin
          if ($existingTags -match "refs/tags/$tagName`$") {
            Write-Host "⚠️ Tag $tagName already exists, skipping creation"
          } else {
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git tag -a "$tagName" -m "🔧 Auto Dev Build: ${{ steps.version.outputs.version }}"
            git push origin "$tagName"
            Write-Host "✅ Created and pushed tag: $tagName"
          }

      # 克隆后端仓库 - 确保获取最新代码
      - name: 克隆后端仓库
        run: |
          if (Test-Path "backend") { 
            Remove-Item -Recurse -Force "backend" 
            Write-Host "🗑️ Removed existing backend directory"
          }
          
          # 克隆最新的主分支代码
          git clone --depth=1 --branch=main https://github.com/MaiM-with-u/mailauncher-backend.git backend
          
          cd backend
          $backendCommit = git rev-parse HEAD
          Write-Host "📝 Backend commit: $backendCommit"
          Write-Host "✅ Backend repository cloned successfully"

      # 设置 Python 环境（GitHub托管的runner）
      - name: 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      # 缓存 pip 依赖 - 使用更具体的缓存键
      - name: 缓存pip依赖
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-dev-${{ hashFiles('backend/requirements.txt') }}-${{ github.run_number }}
          restore-keys: |
            ${{ runner.os }}-pip-dev-${{ hashFiles('backend/requirements.txt') }}
            ${{ runner.os }}-pip-

      # 安装后端构建依赖
      - name: 安装后端依赖
        run: |
          cd backend
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install pyinstaller
          Write-Host "✅ Backend dependencies installed"
          
      # 创建数据目录
      - name: 创建后端数据目录
        run: |
          cd backend
          if (!(Test-Path "data")) { New-Item -ItemType Directory -Path "data" }
          
      # 构建 Windows 后端
      - name: 构建Windows后端
        run: |
          cd backend
          
          # 清理之前的构建产物
          if (Test-Path "dist") { 
            Remove-Item -Recurse -Force "dist" 
            Write-Host "🗑️ Cleaned previous build artifacts"
          }
          if (Test-Path "build") { 
            Remove-Item -Recurse -Force "build" 
            Write-Host "🗑️ Cleaned previous build cache"
          }
          
          # 显示当前代码信息
          $currentCommit = git rev-parse HEAD
          Write-Host "📝 Building backend from commit: $currentCommit"
          
          python -m PyInstaller main.spec --clean
          Write-Host "✅ Backend build completed"
          
      # 复制后端可执行文件到 Tauri binaries 目录
      - name: 复制后端可执行文件到Tauri目录
        run: |
          # 确保目录存在
          if (!(Test-Path "src-tauri\binaries")) { 
            New-Item -ItemType Directory -Path "src-tauri\binaries" -Force 
            Write-Host "✅ Created binaries directory"
          }
          
          # 检查源文件是否存在
          $sourceFile = "backend\dist\MaiLauncher-Backend.exe"
          $destFile = "src-tauri\binaries\MaiLauncher-Backend-x86_64-pc-windows-msvc.exe"
          
          if (Test-Path $sourceFile) {
            Copy-Item $sourceFile $destFile -Force
            Write-Host "✅ Backend executable copied successfully: $sourceFile -> $destFile"
            
            # 验证文件存在
            if (Test-Path $destFile) {
              $fileSize = (Get-Item $destFile).Length
              Write-Host "✅ File verification successful, size: $([math]::round($fileSize/1MB, 2)) MB"
            } else {
              Write-Error "❌ File copy failed"
              exit 1
            }
          } else {
            Write-Error "❌ Source file does not exist: $sourceFile"
            Write-Host "Listing backend/dist directory contents:"
            if (Test-Path "backend\dist") {
              Get-ChildItem "backend\dist" -Recurse | ForEach-Object { Write-Host "  $($_.FullName)" }
            } else {
              Write-Host "  Directory does not exist"
            }
            exit 1
          }

      # 检查并安装 Node.js
      - name: 设置Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          
      # 设置 pnpm
      - name: 设置pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          run_install: false

      # 清理前端缓存
      - name: 清理前端缓存
        run: |
          # 清理 pnpm 缓存
          if (Get-Command pnpm -ErrorAction SilentlyContinue) {
            pnpm store prune
            Write-Host "🗑️ Cleaned pnpm store"
          }
          
          # 清理 node_modules
          if (Test-Path "node_modules") {
            Remove-Item -Recurse -Force "node_modules"
            Write-Host "🗑️ Removed node_modules"
          }
          
          # 清理构建缓存
          if (Test-Path "dist") {
            Remove-Item -Recurse -Force "dist"
            Write-Host "🗑️ Removed dist directory"
          }
          
          Write-Host "✅ Frontend cache cleaned"

      # 安装前端依赖
      - name: 安装前端依赖
        run: |
          Write-Host "📦 Installing fresh dependencies..."
          pnpm install --no-frozen-lockfile --force
          Write-Host "✅ Dependencies installed"

      # 临时更新版本号用于构建
      - name: 临时更新版本号用于构建
        run: |
          $devVersion = "${{ steps.version.outputs.version }}"
          
          # 临时更新package.json版本号（仅用于构建，不提交）
          $packageJson = Get-Content -Raw -Path "package.json" -Encoding UTF8 | ConvertFrom-Json
          $originalVersion = $packageJson.version
          $packageJson.version = $devVersion
          $packageJson | ConvertTo-Json -Depth 100 | Set-Content -Path "package.json" -Encoding UTF8
          Write-Host "🔧 Temporarily updated package.json version: $originalVersion -> $devVersion"
          
          # 临时更新Cargo.toml版本号（仅用于构建，不提交）
          $cargoToml = Get-Content -Path "src-tauri\Cargo.toml" -Encoding UTF8
          $cargoToml = $cargoToml -replace '^version = ".*"', "version = `"$devVersion`""
          $cargoToml | Set-Content -Path "src-tauri\Cargo.toml" -Encoding UTF8
          Write-Host "🔧 Temporarily updated Cargo.toml version to: $devVersion"

      # 构建 Tauri 应用（Dev版本）
      - name: 构建Tauri应用（开发版本）
        run: |
          Write-Host "🔧 Building Dev Version: ${{ steps.version.outputs.version }}"
          
          # 清理 Tauri 构建缓存
          if (Test-Path "src-tauri\target") {
            Remove-Item -Recurse -Force "src-tauri\target"
            Write-Host "🗑️ Cleaned Tauri build cache"
          }
          
          # 显示构建信息
          Write-Host "📝 Frontend commit: ${{ github.sha }}"
          
          # 构建前端
          pnpm run build:dev
          
          # 构建 Tauri 应用
          pnpm tauri build
          
          Write-Host "✅ Tauri build completed"
          
      # 上传构建产物
      - name: 上传开发版构建产物
        uses: actions/upload-artifact@v4
        with:
          name: dev-build-windows-${{ steps.version.outputs.version }}
          path: src-tauri/target/release/bundle/
          retention-days: 7

      - name: 创建发布说明
        run: |
          # 获取后端提交信息
          cd backend
          $backendCommit = git rev-parse HEAD
          $backendCommitShort = git rev-parse --short HEAD
          cd ..
          
          # 构建发布说明内容
          $releaseNote = "# 🔧 开发版本构建 - ${{ steps.version.outputs.version }}`n`n"
          $releaseNote += "## 📋 构建信息`n"
          $releaseNote += "- **基础版本**: ${{ steps.version.outputs.package_version }}`n"
          $releaseNote += "- **构建时间**: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')`n"
          $releaseNote += "- **构建类型**: Development`n"
          $releaseNote += "- **前端提交**: ${{ github.sha }}`n"
          $releaseNote += "- **后端提交**: $backendCommit`n"
          $releaseNote += "- **分支**: ${{ github.ref_name }}`n"
          $releaseNote += "- **构建号**: ${{ github.run_number }}`n`n"
          $releaseNote += "## 🔍 代码版本详情`n"
          $releaseNote += "- **前端仓库**: [mailauncher@${{ github.sha }}](https://github.com/MaiM-with-u/mailauncher/commit/${{ github.sha }})`n"
          $releaseNote += "- **后端仓库**: [mailauncher-backend@$backendCommitShort](https://github.com/MaiM-with-u/mailauncher-backend/commit/$backendCommit)`n`n"
          $releaseNote += "## ⚠️ 注意事项`n"
          $releaseNote += "这是自动构建的开发版本，仅用于测试和开发目的。`n"
          $releaseNote += "- 可能包含未经充分测试的功能`n"
          $releaseNote += "- 不建议在生产环境中使用`n"
          $releaseNote += "- 该版本会定期清理`n"
          $releaseNote += "- 本次构建确保使用最新代码，清理了所有缓存`n`n"
          $releaseNote += "## 📦 下载`n"
          $releaseNote += "- Windows: MSI, EXE 安装包`n`n"
          $releaseNote += "---`n"
          $releaseNote += "*此版本由 GitHub Actions 自动构建和发布*"
          
          $releaseNote | Set-Content -Path "release_note.md" -Encoding UTF8
          Write-Host "✅ Release notes created"

      - name: 创建开发版发布
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.create_tag.outputs.tag_name }}
          name: "🔧 Dev Build - ${{ steps.version.outputs.version }}"
          body_path: release_note.md
          files: |
            src-tauri/target/release/bundle/**/*.msi
            src-tauri/target/release/bundle/**/*.exe
          prerelease: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup-old-dev-releases:
    name: 清理旧开发版本
    needs: [build-windows]
    runs-on: windows-latest # 使用GitHub托管的Windows服务器
    if: always()
    
    steps:
      - name: 清理旧的开发版发布
        run: |
          Write-Host "🧹 Cleaning up old dev releases..."
          
          # 获取所有开发版本的releases（按创建时间倒序）
          $releases = gh release list --limit 50 --json tagName,createdAt,prerelease,id | ConvertFrom-Json
          $devReleases = $releases | Where-Object { $_.prerelease -eq $true -and $_.tagName -match "^dev-" } | Sort-Object createdAt -Descending
          
          Write-Host "Found $($devReleases.Count) dev releases"
          
          # 保留最新的5个开发版本，删除其余的
          if ($devReleases.Count -gt 5) {
            $releasesToDelete = $devReleases | Select-Object -Skip 5
            
            foreach ($release in $releasesToDelete) {
              $tagName = $release.tagName
              Write-Host "🗑️ Deleting old dev release: $tagName"
              
              try {
                # 删除release
                gh release delete $tagName --yes
                
                # 删除tag
                git push --delete origin $tagName
                
                Write-Host "✅ Deleted: $tagName"
              } catch {
                Write-Host "❌ Failed to delete: $tagName - $($_.Exception.Message)"
              }
            }
          } else {
            Write-Host "✅ No cleanup needed (less than 5 dev releases)"
          }
          
          Write-Host "✅ Cleanup completed. Kept $([Math]::Min(5, $($devReleases.Count))) dev releases."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
