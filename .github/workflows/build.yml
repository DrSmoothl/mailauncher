name: Build Tauri App with Backend

on:
  push:
    branches:
      # 当推送到以下分支时触发构建
      - main
      # - master
      # - dev # 示例：如果你有开发分支，也可以加上
  pull_request:
    branches:
      - main
  workflow_dispatch: # 允许手动触发

# 添加必要的权限
permissions:
  contents: read
  actions: read

# 限制并发执行，防止不必要的资源消耗
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-windows-self-hosted:
    runs-on: [self-hosted, windows, x64] # 使用自托管的 Windows runner
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # 克隆后端仓库
    - name: Clone backend repository
      run: |
        if (Test-Path "backend") { Remove-Item -Recurse -Force "backend" }
        git clone https://github.com/MaiM-with-u/mailauncher-backend.git backend
      # 直接设置 Python 路径（基于系统实际路径）
    - name: Set Python path directly
      run: |
        # 基于日志输出的实际 PATH，直接使用完整路径
        $pythonPath = "C:\Users\Administrator\AppData\Local\Programs\Python\Python313\python.exe"
        Write-Host "Trying Python at: $pythonPath"
        
        try {
          # 直接使用完整路径，绕过 Test-Path 的权限检查
          $version = & $pythonPath --version 2>&1
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✓ Python found and working"
            Write-Host "Version: $version"
            echo "PYTHON_EXECUTABLE=$pythonPath" >> $env:GITHUB_ENV
            Write-Host "Python path set successfully"
            exit 0
          } else {
            Write-Host "Python found but failed to execute"
          }
        } catch {
          Write-Host "Failed to execute Python: $($_.Exception.Message)"
        }
        
        # 如果直接路径失败，尝试其他系统级路径
        $systemPaths = @(
          "C:\Python313\python.exe",
          "C:\Python312\python.exe",
          "C:\Program Files\Python313\python.exe",
          "C:\Program Files\Python312\python.exe"
        )
        
        foreach ($path in $systemPaths) {
          Write-Host "Checking: $path"
          try {
            if (Test-Path $path) {
              $version = & $path --version 2>&1
              if ($LASTEXITCODE -eq 0) {
                Write-Host "✓ Found working Python: $path"
                Write-Host "Version: $version"
                echo "PYTHON_EXECUTABLE=$path" >> $env:GITHUB_ENV
                exit 0
              }
            }
          } catch {
            Write-Host "Cannot access: $path"
          }
        }
        
        Write-Host "Python not found, will try automatic detection..."# 检查并设置 Python 环境（自托管 runner）
    - name: Setup Python environment
      run: |
        # 检查上一步是否已经设置了 Python
        if ($env:PYTHON_EXECUTABLE) {
          Write-Host "Python already set from previous step: $env:PYTHON_EXECUTABLE"
          exit 0
        }
        
        Write-Host "Searching for Python installation..."
        
        # 首先尝试 PATH 中的 Python 命令
        $pythonCommands = @("python", "python3", "py")
        foreach ($cmd in $pythonCommands) {
          Write-Host "Trying command: $cmd"
          try {
            $version = & $cmd --version 2>&1
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✓ Working Python command found: $cmd"
              Write-Host "Version: $version"
              echo "PYTHON_EXECUTABLE=$cmd" >> $env:GITHUB_ENV
              Write-Host "=== Python Setup Complete ==="
              exit 0
            }
          } catch {
            Write-Host "✗ Command not found or failed: $cmd"
          }
        }
        
        # 如果命令都失败了，尝试系统级路径（避免用户配置文件）
        $systemPaths = @(
          "C:\Python*\python.exe",
          "C:\Program Files\Python*\python.exe",
          "C:\Program Files (x86)\Python*\python.exe"
        )
        
        $pythonFound = $false
        foreach ($path in $systemPaths) {
          Write-Host "Checking system path: $path"
          try {
            $resolvedPaths = Get-ChildItem -Path $path -ErrorAction SilentlyContinue | Sort-Object LastWriteTime -Descending
            if ($resolvedPaths) {
              foreach ($resolvedPath in $resolvedPaths) {
                Write-Host "Found potential Python at: $($resolvedPath.FullName)"
                try {
                  $version = & $resolvedPath.FullName --version 2>&1
                  if ($LASTEXITCODE -eq 0) {
                    Write-Host "✓ Working Python found: $($resolvedPath.FullName)"
                    Write-Host "Version: $version"
                    echo "PYTHON_EXECUTABLE=$($resolvedPath.FullName)" >> $env:GITHUB_ENV
                    $pythonFound = $true
                    break
                  }
                } catch {
                  Write-Host "✗ Failed to execute: $($resolvedPath.FullName)"
                }
              }
              if ($pythonFound) { break }
            }
          } catch {
            Write-Host "✗ Error checking path: $path"
          }
        }
        
        if (-not $pythonFound) {
          Write-Host "=== Python Search Failed ==="
          Write-Host "Current working directory: $(Get-Location)"
          Write-Host "Current user: $env:USERNAME"
          Write-Host "PATH variable:"
          $env:PATH -split ';' | ForEach-Object { Write-Host "  $_" }
          Write-Error "Python not found! Please ensure Python is installed and accessible."
          exit 1
        }
        
        Write-Host "=== Python Setup Complete ==="
        Write-Host "Python executable: $env:PYTHON_EXECUTABLE"# 清理可能的缓存和临时文件（可选但推荐）
    - name: Clean Python cache
      run: |
        Write-Host "Cleaning Python cache..."
        Write-Host "Using Python: $env:PYTHON_EXECUTABLE"
        & $env:PYTHON_EXECUTABLE -m pip cache purge
        Write-Host "Cache cleaned."
        
    # 缓存 pip 依赖
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    # 安装后端构建依赖
    - name: Install backend dependencies
      run: |
        cd backend
        & $env:PYTHON_EXECUTABLE -m pip install --upgrade pip
        & $env:PYTHON_EXECUTABLE -m pip install -r requirements.txt        & $env:PYTHON_EXECUTABLE -m pip install pyinstaller
        
    # 创建数据目录
    - name: Create backend data directory
      run: |
        cd backend
        if (!(Test-Path "data")) { New-Item -ItemType Directory -Path "data" }
        
    # 构建 Windows 后端
    - name: Build Windows backend
      run: |
        cd backend
        Write-Host "Using Python: $env:PYTHON_EXECUTABLE"
        & $env:PYTHON_EXECUTABLE -m PyInstaller main.spec
        
    # 复制后端可执行文件到 Tauri binaries 目录
    - name: Copy backend executable to Tauri binaries
      run: |
        if (!(Test-Path "src-tauri\binaries")) { New-Item -ItemType Directory -Path "src-tauri\binaries" -Force }
        Copy-Item "backend\dist\MaiLauncher-Backend.exe" "src-tauri\binaries\MaiLauncher-Backend-x86_64-pc-windows-msvc.exe"

    # 检查并安装 Node.js
    - name: Setup Node.js 22
      uses: actions/setup-node@v4
      with:
        node-version: 22
        
    # 设置 pnpm
    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: latest
        run_install: true

    # 构建 Tauri 应用
    - name: Build Tauri (Windows Self-Hosted)
      run: pnpm tauri build
      
    # 上传构建产物
    - name: Upload Artifacts (Windows Self-Hosted)
      uses: actions/upload-artifact@v4
      with:
        name: tauri-build-windows-self-hosted # Artifact 名称
        path: src-tauri/target/release/bundle/ # 构建产物所在的目录

  build-windows-github:
    runs-on: windows-latest # 使用 GitHub 提供的 Windows runner (保留作为备用)
    if: false # 默认禁用，需要时可以手动启用

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # 克隆后端仓库
    - name: Clone backend repository
      run: |
        if (Test-Path "backend") { Remove-Item -Recurse -Force "backend" }
        git clone https://github.com/MaiM-with-u/mailauncher-backend.git backend
        
    # 设置 Python 环境用于构建后端
    - name: Set up Python for backend
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    # 直接设置 Python 路径（基于系统实际路径）
    - name: Set Python path directly
      run: |
        # 基于您系统的实际 Python 安装路径
        $pythonPath = "C:\Users\Administrator\AppData\Local\Programs\Python\Python313\python.exe"
        if (Test-Path $pythonPath) {
          Write-Host "Found Python at: $pythonPath"
          & $pythonPath --version
          echo "PYTHON_EXECUTABLE=$pythonPath" >> $env:GITHUB_ENV
          Write-Host "Python path set successfully"
        } else {
          Write-Host "Python not found at expected path: $pythonPath"
          Write-Host "Falling back to automatic detection..."
        }
        
    # 缓存 pip 依赖
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    # 安装后端构建依赖
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    # 创建数据目录
    - name: Create backend data directory
      run: |
        cd backend
        if (!(Test-Path "data")) { New-Item -ItemType Directory -Path "data" }
        
    # 构建 Windows 后端
    - name: Build Windows backend
      run: |
        cd backend
        pyinstaller main.spec
        
    # 复制后端可执行文件到 Tauri binaries 目录
    - name: Copy backend executable to Tauri binaries
      run: |
        if (!(Test-Path "src-tauri\binaries")) { New-Item -ItemType Directory -Path "src-tauri\binaries" -Force }
        Copy-Item "backend\dist\MaiLauncher-Backend.exe" "src-tauri\binaries\MaiLauncher-Backend-x86_64-pc-windows-msvc.exe"

    # 检查并安装 Node.js
    - name: Setup Node.js 22
      uses: actions/setup-node@v4
      with:
        node-version: 22
          # 设置 pnpm
    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: latest
        run_install: true
    
    # 构建 Tauri 应用
    - name: Build Tauri (Windows GitHub)
      run: pnpm tauri build
      
    # 上传构建产物
    - name: Upload Artifacts (Windows GitHub)
      uses: actions/upload-artifact@v4
      with:
        name: tauri-build-windows-github # Artifact 名称
        path: src-tauri/target/release/bundle/ # 构建产物所在的目录

  build-linux:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu runner

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # 检出代码

    # 克隆后端仓库
    - name: Clone backend repository
      run: |
        git clone https://github.com/MaiM-with-u/mailauncher-backend.git backend
        
    # 设置 Python 环境用于构建后端
    - name: Set up Python for backend
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    # 缓存 pip 依赖
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    # 安装后端构建依赖
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    # 安装 Linux 后端构建依赖
    - name: Install Linux backend build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    # 创建数据目录
    - name: Create backend data directory
      run: |
        cd backend
        mkdir -p data
        
    # 构建 Linux 后端
    - name: Build Linux backend
      run: |
        cd backend
        pyinstaller main-linux.spec
        
    # 创建 Tauri binaries 目录并复制后端可执行文件
    - name: Copy backend executable to Tauri binaries
      run: |
        mkdir -p src-tauri/binaries
        cp backend/dist/MaiLauncher-Backend src-tauri/binaries/MaiLauncher-Backend-x86_64-unknown-linux-gnu
        chmod +x src-tauri/binaries/MaiLauncher-Backend-x86_64-unknown-linux-gnu

    - name: Setup Node.js 22
      uses: actions/setup-node@v4 # 设置 Node.js 环境
      with:
        node-version: 22 # 指定 Node.js 版本

    - name: Setup pnpm
      uses: pnpm/action-setup@v3 # 设置 pnpm
      with:
        version: latest # 你也可以指定一个固定的 pnpm 版本，例如 '8'
        run_install: true # 运行 pnpm install 安装依赖

    # Tauri 在 Linux 上构建通常需要一些系统依赖，如 libwebkit2gtk-4.0-dev
    # ubuntu-latest 通常预装了大部分，但添加这个步骤更保险
    - name: Install Linux Dependencies (Optional but Recommended)
      run: |
        sudo apt-get update        # 在 Ubuntu 24.04 (Noble) 中，libwebkit2gtk-4.0-dev 被更新的版本取代
        # 使用 webkit2gtk-4.1-dev 或 libwebkit2gtk-6.0-dev 是更适合 24.04 的选择
        # webkit2gtk-4.1-dev 是 Tauri v2 推荐的更通用的包名
        sudo apt-get install -y webkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev

    - name: Build Tauri (Linux)
      # 使用 pnpm 执行 Tauri 构建命令
      # 这会自动处理 Rust 工具链的安装
      run: pnpm tauri build
      
    - name: Upload Artifacts (Linux)
      uses: actions/upload-artifact@v4 # 上传构建产物
      with:
        name: tauri-build-linux # Artifact 名称
        path: src-tauri/target/release/bundle/ # 构建产物所在的目录（包含 .AppImage 等）
  build-macos:
    runs-on: macos-latest # 使用最新的 macOS runner

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # 克隆后端仓库
    - name: Clone backend repository
      run: |
        git clone https://github.com/MaiM-with-u/mailauncher-backend.git backend
        
    # 设置 Python 环境用于构建后端
    - name: Set up Python for backend
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    # 缓存 pip 依赖
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    # 安装后端构建依赖
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    # 创建数据目录
    - name: Create backend data directory
      run: |
        cd backend
        mkdir -p data
        
    # 构建 macOS 后端
    - name: Build macOS backend
      run: |
        cd backend
        pyinstaller main-macos.spec
        
    # 创建 Tauri binaries 目录并复制后端可执行文件
    - name: Copy backend executable to Tauri binaries
      run: |
        mkdir -p src-tauri/binaries
        cp backend/dist/MaiLauncher-Backend src-tauri/binaries/MaiLauncher-Backend-aarch64-apple-darwin
        chmod +x src-tauri/binaries/MaiLauncher-Backend-aarch64-apple-darwin

    - name: Setup Node.js 22
      uses: actions/setup-node@v4
      with:
        node-version: 22

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: latest
        run_install: true

    # macOS 构建需要 Xcode，预装在 macos-latest runner 上

    - name: Build Tauri (macOS)
      run: pnpm tauri build

    - name: Upload Artifacts (macOS)
      uses: actions/upload-artifact@v4
      with:
        name: tauri-build-macos # Artifact 名称
        path: src-tauri/target/release/bundle/ # 构建产物所在的目录（包含 .app, .dmg 等）
