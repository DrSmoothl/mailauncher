name: Build Tauri App with Backend

on:
  push:
    branches:
      # 当推送到以下分支时触发构建
      - main
      # - master
      # - dev # 示例：如果你有开发分支，也可以加上

# 限制并发执行，防止不必要的资源消耗
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-windows:
    runs-on: windows-latest # 使用 GitHub 提供的 Windows runner

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # 克隆后端仓库
    - name: Clone backend repository
      run: |
        if (Test-Path "backend") { Remove-Item -Recurse -Force "backend" }
        git clone https://github.com/MaiM-with-u/mailauncher-backend.git backend
        
    # 设置 Python 环境用于构建后端
    - name: Set up Python for backend
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    # 缓存 pip 依赖
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    # 安装后端构建依赖
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    # 创建数据目录
    - name: Create backend data directory
      run: |
        cd backend
        if (!(Test-Path "data")) { New-Item -ItemType Directory -Path "data" }
        
    # 构建 Windows 后端
    - name: Build Windows backend
      run: |        cd backend
        pyinstaller main.spec
        
    # 复制后端可执行文件到 Tauri binaries 目录
    - name: Copy backend executable to Tauri binaries
      run: |
        if (!(Test-Path "src-tauri\binaries")) { New-Item -ItemType Directory -Path "src-tauri\binaries" -Force }
        Copy-Item "backend\dist\MaiLauncher-Backend.exe" "src-tauri\binaries\MaiLauncher-Backend-x86_64-pc-windows-msvc.exe"

    # 检查并安装 Node.js
    - name: Setup Node.js 22
      uses: actions/setup-node@v4
      with:
        node-version: 22

    # 设置 pnpm
    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:        version: latest
        run_install: true

    # 构建 Tauri 应用
    - name: Build Tauri (Windows)
      run: pnpm tauri build

    # 上传构建产物
    - name: Upload Artifacts (Windows)
      uses: actions/upload-artifact@v4      with:
        name: tauri-build-windows # Artifact 名称
        path: src-tauri/target/release/bundle/ # 构建产物所在的目录

  build-linux:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu runner

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # 检出代码

    # 克隆后端仓库
    - name: Clone backend repository
      run: |
        git clone https://github.com/MaiM-with-u/mailauncher-backend.git backend
        
    # 设置 Python 环境用于构建后端
    - name: Set up Python for backend
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    # 缓存 pip 依赖
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    # 安装后端构建依赖
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    # 安装 Linux 后端构建依赖
    - name: Install Linux backend build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    # 创建数据目录
    - name: Create backend data directory
      run: |
        cd backend
        mkdir -p data
        
    # 构建 Linux 后端
    - name: Build Linux backend
      run: |
        cd backend
        pyinstaller main-linux.spec
        
    # 创建 Tauri binaries 目录并复制后端可执行文件
    - name: Copy backend executable to Tauri binaries
      run: |
        mkdir -p src-tauri/binaries
        cp backend/dist/MaiLauncher-Backend src-tauri/binaries/MaiLauncher-Backend-x86_64-unknown-linux-gnu
        chmod +x src-tauri/binaries/MaiLauncher-Backend-x86_64-unknown-linux-gnu

    - name: Setup Node.js 22
      uses: actions/setup-node@v4 # 设置 Node.js 环境
      with:
        node-version: 22 # 指定 Node.js 版本

    - name: Setup pnpm
      uses: pnpm/action-setup@v3 # 设置 pnpm
      with:
        version: latest # 你也可以指定一个固定的 pnpm 版本，例如 '8'
        run_install: true # 运行 pnpm install 安装依赖

    # Tauri 在 Linux 上构建通常需要一些系统依赖，如 libwebkit2gtk-4.0-dev
    # ubuntu-latest 通常预装了大部分，但添加这个步骤更保险
    - name: Install Linux Dependencies (Optional but Recommended)
      run: |
        sudo apt-get update
        # 在 Ubuntu 24.04 (Noble) 中，libwebkit2gtk-4.0-dev 被更新的版本取代
        # 使用 webkit2gtk-4.1-dev 或 libwebkit2gtk-6.0-dev 是更适合 24.04 的选择
        # webkit2gtk-4.1-dev 是 Tauri v2 推荐的更通用的包名
        sudo apt-get install -y webkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev

    - name: Build Tauri (Linux)
      # 使用 pnpm 执行 Tauri 构建命令
      # 这会自动处理 Rust 工具链的安装
      run: pnpm tauri build

    - name: Upload Artifacts (Linux)
      uses: actions/upload-artifact@v4 # 上传构建产物
      with:        name: tauri-build-linux # Artifact 名称
        path: src-tauri/target/release/bundle/ # 构建产物所在的目录（包含 .AppImage 等）

  build-macos:
    runs-on: macos-latest # 使用最新的 macOS runner

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # 克隆后端仓库
    - name: Clone backend repository
      run: |
        git clone https://github.com/MaiM-with-u/mailauncher-backend.git backend
        
    # 设置 Python 环境用于构建后端
    - name: Set up Python for backend
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    # 缓存 pip 依赖
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    # 安装后端构建依赖
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    # 创建数据目录
    - name: Create backend data directory
      run: |
        cd backend
        mkdir -p data
        
    # 构建 macOS 后端
    - name: Build macOS backend
      run: |
        cd backend
        pyinstaller main-macos.spec
        
    # 创建 Tauri binaries 目录并复制后端可执行文件
    - name: Copy backend executable to Tauri binaries
      run: |
        mkdir -p src-tauri/binaries
        cp backend/dist/MaiLauncher-Backend src-tauri/binaries/MaiLauncher-Backend-aarch64-apple-darwin
        chmod +x src-tauri/binaries/MaiLauncher-Backend-aarch64-apple-darwin

    - name: Setup Node.js 22
      uses: actions/setup-node@v4
      with:
        node-version: 22

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: latest
        run_install: true

    # macOS 构建需要 Xcode，预装在 macos-latest runner 上

    - name: Build Tauri (macOS)
      run: pnpm tauri build

    - name: Upload Artifacts (macOS)
      uses: actions/upload-artifact@v4
      with:
        name: tauri-build-macos # Artifact 名称
        path: src-tauri/target/release/bundle/ # 构建产物所在的目录（包含 .app, .dmg 等）
