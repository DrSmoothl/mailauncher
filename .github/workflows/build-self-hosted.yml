name: Build on Self-hosted Server

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allow manual trigger

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-windows-self-hosted:
    runs-on: [self-hosted, windows, x64]
    timeout-minutes: 600 # Set timeout to prevent hanging

    env:
      PYTHON_VERSION: "3.12"
      NODE_VERSION: "22"
      BACKEND_REPO: "https://github.com/MaiM-with-u/mailauncher-backend.git"
      TAURI_BINARIES_DIR: "src-tauri/binaries"

    steps:
      # Pre-build cleanup
      - name: Pre-build cleanup
        shell: pwsh
        run: |
          Write-Host "=== Pre-build workspace cleanup ==="
          try {
            # Force stop potential remaining processes
            Get-Process | Where-Object {
              $_.ProcessName -like "*node*" -or 
              $_.ProcessName -like "*rust*" -or 
              $_.ProcessName -like "*python*"
            } | Stop-Process -Force -ErrorAction SilentlyContinue
            
            # Clean working directory
            Get-ChildItem -Path "." -Recurse -Force | 
              Where-Object { $_.FullName -notlike "*\.git*" } |
              Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
            
            Write-Host "Pre-cleanup completed"
          } catch {
            Write-Host "##[error] Error during pre-cleanup: $($_.Exception.Message)"
            exit 1
          }

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 0 # Get complete git history

      # Environment check
      - name: Environment check
        shell: pwsh
        run: |
          Write-Host "=== Self-hosted server environment check ==="
          Write-Host "Computer name: $env:COMPUTERNAME"
          Write-Host "Username: $env:USERNAME"
          Write-Host "Operating system: $env:OS"
          Write-Host "Architecture: $env:PROCESSOR_ARCHITECTURE"
          Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"
          Write-Host "Current path: $(Get-Location)"

          # Check essential tools
          $requiredTools = @(
            @{ Name = "Python"; Command = "python --version" },
            @{ Name = "Pip"; Command = "pip --version" },
            @{ Name = "Git"; Command = "git --version" },
            @{ Name = "Rust"; Command = "rustc --version" },
            @{ Name = "Cargo"; Command = "cargo --version" }
          )

          foreach ($tool in $requiredTools) {
            try {
              $version = (Invoke-Expression $tool.Command 2>&1 | Out-String).Trim()
              Write-Host "$($tool.Name): $version"
            } catch {
              Write-Host "##[error] $($tool.Name): Not properly installed"
              exit 1
            }
          }

          # Check disk space
          $disk = Get-WmiObject -Class Win32_LogicalDisk -Filter "DeviceID='C:'"
          $freeSpace = [math]::Round($disk.FreeSpace / 1GB, 2)
          Write-Host "C: drive free space: ${freeSpace} GB"

          if ($freeSpace -lt 15) {
            Write-Host "##[warning] Warning: Disk space less than 15GB, may affect build"
          }

      # Clone backend repository
      - name: Clone backend repository
        shell: pwsh
        run: |
          Write-Host "=== Cloning backend repository ==="
          if (Test-Path "backend") { 
            Write-Host "Cleaning existing backend directory"
            Remove-Item -Recurse -Force "backend" 
          }

          try {
            git clone $env:BACKEND_REPO backend
            Write-Host "Backend repository cloned successfully"
          } catch {
            Write-Host "##[error] Failed to clone backend repository: $($_.Exception.Message)"
            exit 1
          }

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: "x64"

      # Cache Python dependencies
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~\AppData\Local\pip\Cache
            backend\__pycache__
          key: ${{ runner.os }}-py-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-py-

      # Install backend dependencies
      - name: Install backend dependencies
        shell: pwsh
        run: |
          Write-Host "=== Installing backend dependencies ==="
          try {
            cd backend
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            pip install pyinstaller
            Write-Host "Backend dependencies installed successfully"
          } catch {
            Write-Host "##[error] Backend dependencies installation failed: $($_.Exception.Message)"
            exit 1
          }

      # Create data directory
      - name: Create backend data directory
        shell: pwsh
        run: |
          try {
            cd backend
            if (!(Test-Path "data")) { 
              New-Item -ItemType Directory -Path "data" | Out-Null 
            }
            Write-Host "Data directory created successfully"
          } catch {
            Write-Host "##[error] Failed to create data directory: $($_.Exception.Message)"
            exit 1
          }

      # Build Windows backend
      - name: Build Windows backend
        shell: pwsh
        run: |
          Write-Host "=== Building Windows backend ==="
          try {
            cd backend
            pyinstaller main.spec
            
            if (Test-Path "dist/MaiLauncher-Backend.exe") {
              Write-Host "Backend build successful"
            } else {
              throw "Build artifact does not exist"
            }
          } catch {
            Write-Host "##[error] Backend build failed: $($_.Exception.Message)"
            exit 1
          }

      # Prepare Tauri backend files
      - name: Prepare Tauri backend executable
        shell: pwsh
        run: |
          Write-Host "=== Preparing Tauri backend files ==="
          try {
            if (!(Test-Path $env:TAURI_BINARIES_DIR)) { 
              New-Item -ItemType Directory -Path $env:TAURI_BINARIES_DIR -Force | Out-Null
            }
            
            $source = "backend\dist\MaiLauncher-Backend.exe"
            $dest = "$env:TAURI_BINARIES_DIR\MaiLauncher-Backend-x86_64-pc-windows-msvc.exe"
            
            if (Test-Path $source) {
              Copy-Item $source $dest -Force
              Write-Host "Backend executable prepared successfully"
            } else {
              throw "Source file does not exist: $source"
            }
          } catch {
            Write-Host "##[error] Failed to prepare backend files: $($_.Exception.Message)"
            exit 1
          }

      # Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      # Set up pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          run_install: false

      # Install frontend dependencies
      - name: Install frontend dependencies
        shell: pwsh
        run: |
          Write-Host "=== Installing frontend dependencies ==="
          try {
            pnpm install --frozen-lockfile --prefer-offline
            Write-Host "Frontend dependencies installed successfully"
          } catch {
            Write-Host "##[error] Frontend dependencies installation failed: $($_.Exception.Message)"
            exit 1
          }

      # Build Tauri application
      - name: Build Tauri application
        shell: pwsh
        run: |
          Write-Host "=== Building Tauri application ==="
          try {
            pnpm tauri build --verbose
            Write-Host "Tauri application build completed"
          } catch {
            Write-Host "##[error] Tauri build failed: $($_.Exception.Message)"
            exit 1
          }

      # Check build artifacts
      - name: Check build artifacts
        shell: pwsh
        run: |
          Write-Host "=== Checking build artifacts ==="
          try {
            $bundlePath = "src-tauri/target/release/bundle"
            if (Test-Path $bundlePath) {
              Write-Host "Build artifacts directory exists"
              Get-ChildItem -Path $bundlePath -Recurse | ForEach-Object {
                $size = if ($_.Length) { [math]::Round($_.Length / 1MB, 2) } else { "Directory" }
                Write-Host "  $($_.FullName) - $size MB"
              }
            } else {
              throw "Build artifacts directory does not exist"
            }
          } catch {
            Write-Host "##[error] Failed to check build artifacts: $($_.Exception.Message)"
            exit 1
          }

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-build-windows-self-hosted-${{ github.sha }}
          path: |
            src-tauri/target/release/bundle/
            src-tauri/binaries/
          retention-days: 30

      # Post-build cleanup
      - name: Post-build cleanup
        if: always()
        shell: pwsh
        run: |
          Write-Host "=== Post-build cleanup ==="
          try {
            # Stop potential remaining processes
            Get-Process | Where-Object {
              $_.ProcessName -like "*node*" -or 
              $_.ProcessName -like "*rust*" -or 
              $_.ProcessName -like "*python*"
            } | Stop-Process -Force -ErrorAction SilentlyContinue
            
            # Clean large directories
            $cleanupPaths = @(
              "backend",
              "node_modules", 
              "src-tauri/target",
              "$env:USERPROFILE\.cargo\registry\cache",
              "$env:USERPROFILE\.pnpm-store"
            )
            
            foreach ($path in $cleanupPaths) {
              if (Test-Path $path) {
                Write-Host "Cleaning: $path"
                Remove-Item -Recurse -Force $path -ErrorAction SilentlyContinue
              }
            }
            
            Write-Host "Cleanup completed"
          } catch {
            Write-Host "##[warning] Error during cleanup: $($_.Exception.Message)"
          }

      # Build status report
      - name: Build status report
        if: always()
        shell: pwsh
        run: |
          Write-Host "=== Build status report ==="
          Write-Host "Workflow: ${{ github.workflow }}"
          Write-Host "Branch: ${{ github.ref }}"
          Write-Host "Commit: ${{ github.sha }}"
          Write-Host "Actor: ${{ github.actor }}"
          Write-Host "Runner: ${{ runner.name }}"
          Write-Host "Completion time: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"

          if ($env:GITHUB_JOB_STATUS -eq "success") {
            Write-Host "Build completed successfully"
          } else {
            Write-Host "##[error] Issues occurred during build process"
          }
