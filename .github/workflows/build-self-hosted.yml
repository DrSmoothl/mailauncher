name: Build on Self-hosted Server

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # 允许手动触发

# 限制并发执行
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-windows-self-hosted:
    runs-on: [self-hosted, windows, x64]
    timeout-minutes: 600 # 设置超时时间，防止任务卡死
    
    steps:
    # 预清理工作空间
    - name: Pre-build cleanup
      run: |
        Write-Host "=== 预清理工作空间 ==="
        try {
          # 强制结束可能的残留进程
          Get-Process | Where-Object {$_.ProcessName -like "*node*" -or $_.ProcessName -like "*rust*" -or $_.ProcessName -like "*python*"} | Stop-Process -Force -ErrorAction SilentlyContinue
          
          # 清理工作目录
          Get-ChildItem -Path "." -Recurse -Force | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
          
          Write-Host "预清理完成"
        } catch {
          Write-Host "预清理过程中出现错误: $($_.Exception.Message)"
        }
        
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        clean: true

    # 环境检查
    - name: Environment check
      run: |
        Write-Host "=== 自托管服务器环境检查 ==="
        Write-Host "计算机名: $env:COMPUTERNAME"
        Write-Host "用户名: $env:USERNAME"
        Write-Host "操作系统: $env:OS"
        Write-Host "架构: $env:PROCESSOR_ARCHITECTURE"
        Write-Host "PowerShell版本: $($PSVersionTable.PSVersion)"
        Write-Host "当前路径: $(Get-Location)"
        
        # 检查 Python
        try {
          $pythonVersion = python --version 2>&1
          Write-Host "✓ Python: $pythonVersion"
          $pipVersion = pip --version 2>&1
          Write-Host "✓ Pip: $pipVersion"
        } catch {
          Write-Host "✗ Python/Pip: 未正确安装"
          throw "Python 环境未正确配置"
        }
        
        # 检查 Git
        try {
          $gitVersion = git --version 2>&1
          Write-Host "✓ Git: $gitVersion"
        } catch {
          Write-Host "✗ Git: 未安装"
          throw "Git 未正确安装"
        }
        
        # 检查 Node.js (如果已安装)
        try {
          $nodeVersion = node --version 2>&1
          Write-Host "✓ Node.js: $nodeVersion"
        } catch {
          Write-Host "⚠ Node.js: 将通过 setup-node 安装"
        }
        
        # 检查磁盘空间
        $disk = Get-WmiObject -Class Win32_LogicalDisk -Filter "DeviceID='C:'"
        $freeSpace = [math]::Round($disk.FreeSpace / 1GB, 2)
        Write-Host "✓ C盘可用空间: ${freeSpace} GB"
        
        if ($freeSpace -lt 10) {
          Write-Host "⚠ 警告: 磁盘空间不足 10GB，可能影响构建"
        }

    # 克隆后端仓库
    - name: Clone backend repository
      run: |
        Write-Host "=== 克隆后端仓库 ==="
        if (Test-Path "backend") { 
          Write-Host "清理现有 backend 目录"
          Remove-Item -Recurse -Force "backend" 
        }
        git clone https://github.com/MaiM-with-u/mailauncher-backend.git backend
        Write-Host "后端仓库克隆完成"
        
    # 设置 Python 环境
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    # 缓存 Python 依赖
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    # 安装后端依赖
    - name: Install backend dependencies
      run: |
        Write-Host "=== 安装后端依赖 ==="
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        Write-Host "后端依赖安装完成"
        
    # 创建数据目录
    - name: Create backend data directory
      run: |
        cd backend
        if (!(Test-Path "data")) { New-Item -ItemType Directory -Path "data" }
        Write-Host "数据目录创建完成"
        
    # 构建 Windows 后端
    - name: Build Windows backend
      run: |
        Write-Host "=== 构建 Windows 后端 ==="
        cd backend
        pyinstaller main.spec
        if (Test-Path "dist/MaiLauncher-Backend.exe") {
          Write-Host "✓ 后端构建成功"
        } else {
          Write-Host "✗ 后端构建失败"
          throw "后端构建失败"
        }
        
    # 准备 Tauri 后端文件
    - name: Prepare Tauri backend executable
      run: |
        Write-Host "=== 准备 Tauri 后端文件 ==="
        if (!(Test-Path "src-tauri\binaries")) { 
          New-Item -ItemType Directory -Path "src-tauri\binaries" -Force 
        }
        Copy-Item "backend\dist\MaiLauncher-Backend.exe" "src-tauri\binaries\MaiLauncher-Backend-x86_64-pc-windows-msvc.exe"
        Write-Host "✓ 后端可执行文件准备完成"

    # 设置 Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22

    # 设置 pnpm
    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: latest
        run_install: false # 先不自动安装，手动控制

    # 安装前端依赖
    - name: Install frontend dependencies
      run: |
        Write-Host "=== 安装前端依赖 ==="
        pnpm install --frozen-lockfile
        Write-Host "✓ 前端依赖安装完成"

    # 构建 Tauri 应用
    - name: Build Tauri application
      run: |
        Write-Host "=== 构建 Tauri 应用 ==="
        pnpm tauri build
        Write-Host "✓ Tauri 应用构建完成"

    # 检查构建产物
    - name: Check build artifacts
      run: |
        Write-Host "=== 检查构建产物 ==="
        $bundlePath = "src-tauri/target/release/bundle"
        if (Test-Path $bundlePath) {
          Write-Host "✓ 构建产物目录存在"
          Get-ChildItem -Path $bundlePath -Recurse | ForEach-Object {
            $size = if ($_.Length) { [math]::Round($_.Length / 1MB, 2) } else { "目录" }
            Write-Host "  $($_.FullName) - $size MB"
          }
        } else {
          Write-Host "✗ 构建产物目录不存在"
          throw "构建失败"
        }

    # 上传构建产物
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tauri-build-windows-self-hosted-${{ github.sha }}
        path: src-tauri/target/release/bundle/
        retention-days: 30 # 保留 30 天

    # 构建后清理
    - name: Post-build cleanup
      if: always()
      run: |
        Write-Host "=== 构建后清理 ==="
        try {
          # 停止可能的残留进程
          Get-Process | Where-Object {$_.ProcessName -like "*node*" -or $_.ProcessName -like "*rust*" -or $_.ProcessName -like "*python*"} | Stop-Process -Force -ErrorAction SilentlyContinue
          
          # 清理大型目录
          $cleanupPaths = @(
            "backend",
            "node_modules", 
            "src-tauri/target",
            "~/.cargo/registry/cache",
            "~/.pnpm-store"
          )
          
          foreach ($path in $cleanupPaths) {
            if (Test-Path $path) {
              Write-Host "清理: $path"
              Remove-Item -Recurse -Force $path -ErrorAction SilentlyContinue
            }
          }
          
          # 清理临时文件
          $tempPaths = @(
            $env:TEMP,
            "C:\Windows\Temp"
          )
          
          foreach ($tempPath in $tempPaths) {
            Get-ChildItem -Path $tempPath -Recurse -Force | Where-Object {
              $_.LastWriteTime -lt (Get-Date).AddDays(-1)
            } | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
          }
          
          Write-Host "✓ 清理完成"
        } catch {
          Write-Host "清理过程中出现错误: $($_.Exception.Message)"
        }

    # 报告构建状态
    - name: Build status report
      if: always()
      run: |
        Write-Host "=== 构建状态报告 ==="
        Write-Host "工作流: ${{ github.workflow }}"
        Write-Host "分支: ${{ github.ref }}"
        Write-Host "提交: ${{ github.sha }}"
        Write-Host "执行者: ${{ github.actor }}"
        Write-Host "运行器: ${{ runner.name }}"
        Write-Host "完成时间: $(Get-Date)"
        
        if ($env:GITHUB_JOB_STATUS -eq "success") {
          Write-Host "✓ 构建成功完成"
        } else {
          Write-Host "✗ 构建过程中出现问题"
        }
